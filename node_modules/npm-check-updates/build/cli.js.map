{"version":3,"file":"cli.js","sources":["../node_modules/commander/lib/error.js","../node_modules/commander/lib/argument.js","../node_modules/commander/lib/help.js","../node_modules/commander/lib/option.js","../node_modules/commander/lib/suggestSimilar.js","../node_modules/commander/lib/command.js","../node_modules/commander/index.js","../node_modules/commander/esm.mjs","../node_modules/rfdc/index.js","../src/bin/cli.ts"],"sourcesContent":["/**\n * CommanderError class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidArgumentError class\n */\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n","const { InvalidArgumentError } = require('./error.js');\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.endsWith('...')) {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  }\n\n  /**\n   * @package\n   */\n\n  _collectValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    previous.push(value);\n    return previous;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Only allow argument value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(\n          `Allowed choices are ${this.argChoices.join(', ')}.`,\n        );\n      }\n      if (this.variadic) {\n        return this._collectValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Make argument required.\n   *\n   * @returns {Argument}\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make argument optional.\n   *\n   * @returns {Argument}\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required ? '<' + nameOutput + '>' : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n","const { humanReadableArgName } = require('./argument.js');\n\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.minWidthToWrap = 40;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n    this.showGlobalOptions = false;\n  }\n\n  /**\n   * prepareContext is called by Commander after applying overrides from `Command.configureHelp()`\n   * and just before calling `formatHelp()`.\n   *\n   * Commander just uses the helpWidth and the rest is provided for optional use by more complex subclasses.\n   *\n   * @param {{ error?: boolean, helpWidth?: number, outputHasColors?: boolean }} contextOptions\n   */\n  prepareContext(contextOptions) {\n    this.helpWidth = this.helpWidth ?? contextOptions.helpWidth ?? 80;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter((cmd) => !cmd._hidden);\n    const helpCommand = cmd._getHelpCommand();\n    if (helpCommand && !helpCommand._hidden) {\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        // @ts-ignore: because overloaded return type\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Compare options for sort.\n   *\n   * @param {Option} a\n   * @param {Option} b\n   * @returns {number}\n   */\n  compareOptions(a, b) {\n    const getSortKey = (option) => {\n      // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.\n      return option.short\n        ? option.short.replace(/^-/, '')\n        : option.long.replace(/^--/, '');\n    };\n    return getSortKey(a).localeCompare(getSortKey(b));\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Built-in help option.\n    const helpOption = cmd._getHelpOption();\n    if (helpOption && !helpOption.hidden) {\n      // Automatically hide conflicting flags. Bit dubious but a historical behaviour that is convenient for single-command programs.\n      const removeShort = helpOption.short && cmd._findOption(helpOption.short);\n      const removeLong = helpOption.long && cmd._findOption(helpOption.long);\n      if (!removeShort && !removeLong) {\n        visibleOptions.push(helpOption); // no changes needed\n      } else if (helpOption.long && !removeLong) {\n        visibleOptions.push(\n          cmd.createOption(helpOption.long, helpOption.description),\n        );\n      } else if (helpOption.short && !removeShort) {\n        visibleOptions.push(\n          cmd.createOption(helpOption.short, helpOption.description),\n        );\n      }\n    }\n    if (this.sortOptions) {\n      visibleOptions.sort(this.compareOptions);\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the visible global options. (Not including help.)\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleGlobalOptions(cmd) {\n    if (!this.showGlobalOptions) return [];\n\n    const globalOptions = [];\n    for (\n      let ancestorCmd = cmd.parent;\n      ancestorCmd;\n      ancestorCmd = ancestorCmd.parent\n    ) {\n      const visibleOptions = ancestorCmd.options.filter(\n        (option) => !option.hidden,\n      );\n      globalOptions.push(...visibleOptions);\n    }\n    if (this.sortOptions) {\n      globalOptions.sort(this.compareOptions);\n    }\n    return globalOptions;\n  }\n\n  /**\n   * Get an array of the arguments if any have a description.\n   *\n   * @param {Command} cmd\n   * @returns {Argument[]}\n   */\n\n  visibleArguments(cmd) {\n    // Side effect! Apply the legacy descriptions before the arguments are displayed.\n    if (cmd._argsDescription) {\n      cmd.registeredArguments.forEach((argument) => {\n        argument.description =\n          argument.description || cmd._argsDescription[argument.name()] || '';\n      });\n    }\n\n    // If there are any arguments with a description then return all the arguments.\n    if (cmd.registeredArguments.find((argument) => argument.description)) {\n      return cmd.registeredArguments;\n    }\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd.registeredArguments\n      .map((arg) => humanReadableArgName(arg))\n      .join(' ');\n    return (\n      cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '')\n    );\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the argument term to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @returns {string}\n   */\n\n  argumentTerm(argument) {\n    return argument.name();\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(\n        max,\n        this.displayWidth(\n          helper.styleSubcommandTerm(helper.subcommandTerm(command)),\n        ),\n      );\n    }, 0);\n  }\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(\n        max,\n        this.displayWidth(helper.styleOptionTerm(helper.optionTerm(option))),\n      );\n    }, 0);\n  }\n\n  /**\n   * Get the longest global option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestGlobalOptionTermLength(cmd, helper) {\n    return helper.visibleGlobalOptions(cmd).reduce((max, option) => {\n      return Math.max(\n        max,\n        this.displayWidth(helper.styleOptionTerm(helper.optionTerm(option))),\n      );\n    }, 0);\n  }\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(\n        max,\n        this.displayWidth(\n          helper.styleArgumentTerm(helper.argumentTerm(argument)),\n        ),\n      );\n    }, 0);\n  }\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let ancestorCmdNames = '';\n    for (\n      let ancestorCmd = cmd.parent;\n      ancestorCmd;\n      ancestorCmd = ancestorCmd.parent\n    ) {\n      ancestorCmdNames = ancestorCmd.name() + ' ' + ancestorCmdNames;\n    }\n    return ancestorCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: because overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the subcommand summary to show in the list of subcommands.\n   * (Fallback to description for backwards compatibility.)\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: because overloaded return type\n    return cmd.summary() || cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    const extraInfo = [];\n\n    if (option.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n      );\n    }\n    if (option.defaultValue !== undefined) {\n      // default for boolean and negated more for programmer than end user,\n      // but show true/false for boolean option as may be for hand-rolled env or config processing.\n      const showDefault =\n        option.required ||\n        option.optional ||\n        (option.isBoolean() && typeof option.defaultValue === 'boolean');\n      if (showDefault) {\n        extraInfo.push(\n          `default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`,\n        );\n      }\n    }\n    // preset for boolean and negated are more for programmer than end user\n    if (option.presetArg !== undefined && option.optional) {\n      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);\n    }\n    if (option.envVar !== undefined) {\n      extraInfo.push(`env: ${option.envVar}`);\n    }\n    if (extraInfo.length > 0) {\n      const extraDescription = `(${extraInfo.join(', ')})`;\n      if (option.description) {\n        return `${option.description} ${extraDescription}`;\n      }\n      return extraDescription;\n    }\n\n    return option.description;\n  }\n\n  /**\n   * Get the argument description to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @return {string}\n   */\n\n  argumentDescription(argument) {\n    const extraInfo = [];\n    if (argument.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n      );\n    }\n    if (argument.defaultValue !== undefined) {\n      extraInfo.push(\n        `default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`,\n      );\n    }\n    if (extraInfo.length > 0) {\n      const extraDescription = `(${extraInfo.join(', ')})`;\n      if (argument.description) {\n        return `${argument.description} ${extraDescription}`;\n      }\n      return extraDescription;\n    }\n    return argument.description;\n  }\n\n  /**\n   * Format a list of items, given a heading and an array of formatted items.\n   *\n   * @param {string} heading\n   * @param {string[]} items\n   * @param {Help} helper\n   * @returns string[]\n   */\n  formatItemList(heading, items, helper) {\n    if (items.length === 0) return [];\n\n    return [helper.styleTitle(heading), ...items, ''];\n  }\n\n  /**\n   * Group items by their help group heading.\n   *\n   * @param {Command[] | Option[]} unsortedItems\n   * @param {Command[] | Option[]} visibleItems\n   * @param {Function} getGroup\n   * @returns {Map<string, Command[] | Option[]>}\n   */\n  groupItems(unsortedItems, visibleItems, getGroup) {\n    const result = new Map();\n    // Add groups in order of appearance in unsortedItems.\n    unsortedItems.forEach((item) => {\n      const group = getGroup(item);\n      if (!result.has(group)) result.set(group, []);\n    });\n    // Add items in order of appearance in visibleItems.\n    visibleItems.forEach((item) => {\n      const group = getGroup(item);\n      if (!result.has(group)) {\n        result.set(group, []);\n      }\n      result.get(group).push(item);\n    });\n    return result;\n  }\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth ?? 80; // in case prepareContext() was not called\n\n    function callFormatItem(term, description) {\n      return helper.formatItem(term, termWidth, description, helper);\n    }\n\n    // Usage\n    let output = [\n      `${helper.styleTitle('Usage:')} ${helper.styleUsage(helper.commandUsage(cmd))}`,\n      '',\n    ];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([\n        helper.boxWrap(\n          helper.styleCommandDescription(commandDescription),\n          helpWidth,\n        ),\n        '',\n      ]);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return callFormatItem(\n        helper.styleArgumentTerm(helper.argumentTerm(argument)),\n        helper.styleArgumentDescription(helper.argumentDescription(argument)),\n      );\n    });\n    output = output.concat(\n      this.formatItemList('Arguments:', argumentList, helper),\n    );\n\n    // Options\n    const optionGroups = this.groupItems(\n      cmd.options,\n      helper.visibleOptions(cmd),\n      (option) => option.helpGroupHeading ?? 'Options:',\n    );\n    optionGroups.forEach((options, group) => {\n      const optionList = options.map((option) => {\n        return callFormatItem(\n          helper.styleOptionTerm(helper.optionTerm(option)),\n          helper.styleOptionDescription(helper.optionDescription(option)),\n        );\n      });\n      output = output.concat(this.formatItemList(group, optionList, helper));\n    });\n\n    if (helper.showGlobalOptions) {\n      const globalOptionList = helper\n        .visibleGlobalOptions(cmd)\n        .map((option) => {\n          return callFormatItem(\n            helper.styleOptionTerm(helper.optionTerm(option)),\n            helper.styleOptionDescription(helper.optionDescription(option)),\n          );\n        });\n      output = output.concat(\n        this.formatItemList('Global Options:', globalOptionList, helper),\n      );\n    }\n\n    // Commands\n    const commandGroups = this.groupItems(\n      cmd.commands,\n      helper.visibleCommands(cmd),\n      (sub) => sub.helpGroup() || 'Commands:',\n    );\n    commandGroups.forEach((commands, group) => {\n      const commandList = commands.map((sub) => {\n        return callFormatItem(\n          helper.styleSubcommandTerm(helper.subcommandTerm(sub)),\n          helper.styleSubcommandDescription(helper.subcommandDescription(sub)),\n        );\n      });\n      output = output.concat(this.formatItemList(group, commandList, helper));\n    });\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Return display width of string, ignoring ANSI escape sequences. Used in padding and wrapping calculations.\n   *\n   * @param {string} str\n   * @returns {number}\n   */\n  displayWidth(str) {\n    return stripColor(str).length;\n  }\n\n  /**\n   * Style the title for displaying in the help. Called with 'Usage:', 'Options:', etc.\n   *\n   * @param {string} str\n   * @returns {string}\n   */\n  styleTitle(str) {\n    return str;\n  }\n\n  styleUsage(str) {\n    // Usage has lots of parts the user might like to color separately! Assume default usage string which is formed like:\n    //    command subcommand [options] [command] <foo> [bar]\n    return str\n      .split(' ')\n      .map((word) => {\n        if (word === '[options]') return this.styleOptionText(word);\n        if (word === '[command]') return this.styleSubcommandText(word);\n        if (word[0] === '[' || word[0] === '<')\n          return this.styleArgumentText(word);\n        return this.styleCommandText(word); // Restrict to initial words?\n      })\n      .join(' ');\n  }\n  styleCommandDescription(str) {\n    return this.styleDescriptionText(str);\n  }\n  styleOptionDescription(str) {\n    return this.styleDescriptionText(str);\n  }\n  styleSubcommandDescription(str) {\n    return this.styleDescriptionText(str);\n  }\n  styleArgumentDescription(str) {\n    return this.styleDescriptionText(str);\n  }\n  styleDescriptionText(str) {\n    return str;\n  }\n  styleOptionTerm(str) {\n    return this.styleOptionText(str);\n  }\n  styleSubcommandTerm(str) {\n    // This is very like usage with lots of parts! Assume default string which is formed like:\n    //    subcommand [options] <foo> [bar]\n    return str\n      .split(' ')\n      .map((word) => {\n        if (word === '[options]') return this.styleOptionText(word);\n        if (word[0] === '[' || word[0] === '<')\n          return this.styleArgumentText(word);\n        return this.styleSubcommandText(word); // Restrict to initial words?\n      })\n      .join(' ');\n  }\n  styleArgumentTerm(str) {\n    return this.styleArgumentText(str);\n  }\n  styleOptionText(str) {\n    return str;\n  }\n  styleArgumentText(str) {\n    return str;\n  }\n  styleSubcommandText(str) {\n    return str;\n  }\n  styleCommandText(str) {\n    return str;\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestGlobalOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper),\n    );\n  }\n\n  /**\n   * Detect manually wrapped and indented strings by checking for line break followed by whitespace.\n   *\n   * @param {string} str\n   * @returns {boolean}\n   */\n  preformatted(str) {\n    return /\\n[^\\S\\r\\n]/.test(str);\n  }\n\n  /**\n   * Format the \"item\", which consists of a term and description. Pad the term and wrap the description, indenting the following lines.\n   *\n   * So \"TTT\", 5, \"DDD DDDD DD DDD\" might be formatted for this.helpWidth=17 like so:\n   *   TTT  DDD DDDD\n   *        DD DDD\n   *\n   * @param {string} term\n   * @param {number} termWidth\n   * @param {string} description\n   * @param {Help} helper\n   * @returns {string}\n   */\n  formatItem(term, termWidth, description, helper) {\n    const itemIndent = 2;\n    const itemIndentStr = ' '.repeat(itemIndent);\n    if (!description) return itemIndentStr + term;\n\n    // Pad the term out to a consistent width, so descriptions are aligned.\n    const paddedTerm = term.padEnd(\n      termWidth + term.length - helper.displayWidth(term),\n    );\n\n    // Format the description.\n    const spacerWidth = 2; // between term and description\n    const helpWidth = this.helpWidth ?? 80; // in case prepareContext() was not called\n    const remainingWidth = helpWidth - termWidth - spacerWidth - itemIndent;\n    let formattedDescription;\n    if (\n      remainingWidth < this.minWidthToWrap ||\n      helper.preformatted(description)\n    ) {\n      formattedDescription = description;\n    } else {\n      const wrappedDescription = helper.boxWrap(description, remainingWidth);\n      formattedDescription = wrappedDescription.replace(\n        /\\n/g,\n        '\\n' + ' '.repeat(termWidth + spacerWidth),\n      );\n    }\n\n    // Construct and overall indent.\n    return (\n      itemIndentStr +\n      paddedTerm +\n      ' '.repeat(spacerWidth) +\n      formattedDescription.replace(/\\n/g, `\\n${itemIndentStr}`)\n    );\n  }\n\n  /**\n   * Wrap a string at whitespace, preserving existing line breaks.\n   * Wrapping is skipped if the width is less than `minWidthToWrap`.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @returns {string}\n   */\n  boxWrap(str, width) {\n    if (width < this.minWidthToWrap) return str;\n\n    const rawLines = str.split(/\\r\\n|\\n/);\n    // split up text by whitespace\n    const chunkPattern = /[\\s]*[^\\s]+/g;\n    const wrappedLines = [];\n    rawLines.forEach((line) => {\n      const chunks = line.match(chunkPattern);\n      if (chunks === null) {\n        wrappedLines.push('');\n        return;\n      }\n\n      let sumChunks = [chunks.shift()];\n      let sumWidth = this.displayWidth(sumChunks[0]);\n      chunks.forEach((chunk) => {\n        const visibleWidth = this.displayWidth(chunk);\n        // Accumulate chunks while they fit into width.\n        if (sumWidth + visibleWidth <= width) {\n          sumChunks.push(chunk);\n          sumWidth += visibleWidth;\n          return;\n        }\n        wrappedLines.push(sumChunks.join(''));\n\n        const nextChunk = chunk.trimStart(); // trim space at line break\n        sumChunks = [nextChunk];\n        sumWidth = this.displayWidth(nextChunk);\n      });\n      wrappedLines.push(sumChunks.join(''));\n    });\n\n    return wrappedLines.join('\\n');\n  }\n}\n\n/**\n * Strip style ANSI escape sequences from the string. In particular, SGR (Select Graphic Rendition) codes.\n *\n * @param {string} str\n * @returns {string}\n * @package\n */\n\nfunction stripColor(str) {\n  // eslint-disable-next-line no-control-regex\n  const sgrPattern = /\\x1b\\[\\d*(;\\d*)*m/g;\n  return str.replace(sgrPattern, '');\n}\n\nexports.Help = Help;\nexports.stripColor = stripColor;\n","const { InvalidArgumentError } = require('./error.js');\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag; // May be a short flag, undefined, or even a long flag (if option has two long flags).\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.presetArg = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n    this.conflictsWith = [];\n    this.implied = undefined;\n    this.helpGroupHeading = undefined; // soft initialised when option added to command\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Preset to use when option used without option-argument, especially optional but also boolean and negated.\n   * The custom processing (parseArg) is called.\n   *\n   * @example\n   * new Option('--color').default('GREYSCALE').preset('RGB');\n   * new Option('--donate [amount]').preset('20').argParser(parseFloat);\n   *\n   * @param {*} arg\n   * @return {Option}\n   */\n\n  preset(arg) {\n    this.presetArg = arg;\n    return this;\n  }\n\n  /**\n   * Add option name(s) that conflict with this option.\n   * An error will be displayed if conflicting options are found during parsing.\n   *\n   * @example\n   * new Option('--rgb').conflicts('cmyk');\n   * new Option('--js').conflicts(['ts', 'jsx']);\n   *\n   * @param {(string | string[])} names\n   * @return {Option}\n   */\n\n  conflicts(names) {\n    this.conflictsWith = this.conflictsWith.concat(names);\n    return this;\n  }\n\n  /**\n   * Specify implied option values for when this option is set and the implied options are not.\n   *\n   * The custom processing (parseArg) is not called on the implied values.\n   *\n   * @example\n   * program\n   *   .addOption(new Option('--log', 'write logging information to file'))\n   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));\n   *\n   * @param {object} impliedOptionValues\n   * @return {Option}\n   */\n  implies(impliedOptionValues) {\n    let newImplied = impliedOptionValues;\n    if (typeof impliedOptionValues === 'string') {\n      // string is not documented, but easy mistake and we can do what user probably intended.\n      newImplied = { [impliedOptionValues]: true };\n    }\n    this.implied = Object.assign(this.implied || {}, newImplied);\n    return this;\n  }\n\n  /**\n   * Set environment variable to check for option value.\n   *\n   * An environment variable is only used if when processed the current option value is\n   * undefined, or the source of the current value is 'default' or 'config' or 'env'.\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  }\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  }\n\n  /**\n   * @package\n   */\n\n  _collectValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    previous.push(value);\n    return previous;\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(\n          `Allowed choices are ${this.argChoices.join(', ')}.`,\n        );\n      }\n      if (this.variadic) {\n        return this._collectValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  }\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as an object attribute key.\n   *\n   * @return {string}\n   */\n\n  attributeName() {\n    if (this.negate) {\n      return camelcase(this.name().replace(/^no-/, ''));\n    }\n    return camelcase(this.name());\n  }\n\n  /**\n   * Set the help group heading.\n   *\n   * @param {string} heading\n   * @return {Option}\n   */\n  helpGroup(heading) {\n    this.helpGroupHeading = heading;\n    return this;\n  }\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @package\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  }\n\n  /**\n   * Return whether a boolean option.\n   *\n   * Options are one of boolean, negated, required argument, or optional argument.\n   *\n   * @return {boolean}\n   * @package\n   */\n\n  isBoolean() {\n    return !this.required && !this.optional && !this.negate;\n  }\n}\n\n/**\n * This class is to make it easier to work with dual options, without changing the existing\n * implementation. We support separate dual options for separate positive and negative options,\n * like `--build` and `--no-build`, which share a single option value. This works nicely for some\n * use cases, but is tricky for others where we want separate behaviours despite\n * the single shared option value.\n */\nclass DualOptions {\n  /**\n   * @param {Option[]} options\n   */\n  constructor(options) {\n    this.positiveOptions = new Map();\n    this.negativeOptions = new Map();\n    this.dualOptions = new Set();\n    options.forEach((option) => {\n      if (option.negate) {\n        this.negativeOptions.set(option.attributeName(), option);\n      } else {\n        this.positiveOptions.set(option.attributeName(), option);\n      }\n    });\n    this.negativeOptions.forEach((value, key) => {\n      if (this.positiveOptions.has(key)) {\n        this.dualOptions.add(key);\n      }\n    });\n  }\n\n  /**\n   * Did the value come from the option, and not from possible matching dual option?\n   *\n   * @param {*} value\n   * @param {Option} option\n   * @returns {boolean}\n   */\n  valueFromOption(value, option) {\n    const optionKey = option.attributeName();\n    if (!this.dualOptions.has(optionKey)) return true;\n\n    // Use the value to deduce if (probably) came from the option.\n    const preset = this.negativeOptions.get(optionKey).presetArg;\n    const negativeValue = preset !== undefined ? preset : false;\n    return option.negate === (negativeValue === value);\n  }\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // short flag, single dash and single character\n  const shortFlagExp = /^-[^-]$/;\n  // long flag, double dash and at least one character\n  const longFlagExp = /^--[^-]/;\n\n  const flagParts = flags.split(/[ |,]+/).concat('guard');\n  // Normal is short and/or long.\n  if (shortFlagExp.test(flagParts[0])) shortFlag = flagParts.shift();\n  if (longFlagExp.test(flagParts[0])) longFlag = flagParts.shift();\n  // Long then short. Rarely used but fine.\n  if (!shortFlag && shortFlagExp.test(flagParts[0]))\n    shortFlag = flagParts.shift();\n  // Allow two long flags, like '--ws, --workspace'\n  // This is the supported way to have a shortish option flag.\n  if (!shortFlag && longFlagExp.test(flagParts[0])) {\n    shortFlag = longFlag;\n    longFlag = flagParts.shift();\n  }\n\n  // Check for unprocessed flag. Fail noisily rather than silently ignore.\n  if (flagParts[0].startsWith('-')) {\n    const unsupportedFlag = flagParts[0];\n    const baseError = `option creation failed due to '${unsupportedFlag}' in option flags '${flags}'`;\n    if (/^-[^-][^-]/.test(unsupportedFlag))\n      throw new Error(\n        `${baseError}\n- a short flag is a single dash and a single character\n  - either use a single dash and a single character (for a short flag)\n  - or use a double dash for a long option (and can have two, like '--ws, --workspace')`,\n      );\n    if (shortFlagExp.test(unsupportedFlag))\n      throw new Error(`${baseError}\n- too many short flags`);\n    if (longFlagExp.test(unsupportedFlag))\n      throw new Error(`${baseError}\n- too many long flags`);\n\n    throw new Error(`${baseError}\n- unrecognised flag format`);\n  }\n  if (shortFlag === undefined && longFlag === undefined)\n    throw new Error(\n      `option creation failed due to no flags found in '${flags}'.`,\n    );\n\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.DualOptions = DualOptions;\n","const maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance)\n    return Math.max(a.length, b.length);\n\n  // distance between prefix substrings of a and b\n  const d = [];\n\n  // pure deletions turn a into empty string\n  for (let i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  }\n  // pure insertions turn empty string into b\n  for (let j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  }\n\n  // fill matrix\n  for (let j = 1; j <= b.length; j++) {\n    for (let i = 1; i <= a.length; i++) {\n      let cost = 1;\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost, // substitution\n      );\n      // transposition\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return '';\n  // remove possible duplicates\n  candidates = Array.from(new Set(candidates));\n\n  const searchingOptions = word.startsWith('--');\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map((candidate) => candidate.slice(2));\n  }\n\n  let similar = [];\n  let bestDistance = maxDistance;\n  const minSimilarity = 0.4;\n  candidates.forEach((candidate) => {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    const distance = editDistance(word, candidate);\n    const length = Math.max(word.length, candidate.length);\n    const similarity = (length - distance) / length;\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n\n  similar.sort((a, b) => a.localeCompare(b));\n  if (searchingOptions) {\n    similar = similar.map((candidate) => `--${candidate}`);\n  }\n\n  if (similar.length > 1) {\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n  }\n  if (similar.length === 1) {\n    return `\\n(Did you mean ${similar[0]}?)`;\n  }\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;\n","const EventEmitter = require('node:events').EventEmitter;\nconst childProcess = require('node:child_process');\nconst path = require('node:path');\nconst fs = require('node:fs');\nconst process = require('node:process');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help, stripColor } = require('./help.js');\nconst { Option, DualOptions } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = false;\n    /** @type {Argument[]} */\n    this.registeredArguments = [];\n    this._args = this.registeredArguments; // deprecated old name\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default, env, cli etc\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._executableDir = null; // custom search directory for subcommands\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._summary = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {(boolean | string)} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = true;\n    this._savedState = null; // used in save/restoreStateBeforeParse\n\n    // see configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      outputError: (str, write) => write(str),\n      getOutHelpWidth: () =>\n        process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () =>\n        process.stderr.isTTY ? process.stderr.columns : undefined,\n      getOutHasColors: () =>\n        useColor() ?? (process.stdout.isTTY && process.stdout.hasColors?.()),\n      getErrHasColors: () =>\n        useColor() ?? (process.stderr.isTTY && process.stderr.hasColors?.()),\n      stripColor: (str) => stripColor(str),\n    };\n\n    this._hidden = false;\n    /** @type {(Option | null | undefined)} */\n    this._helpOption = undefined; // Lazy created on demand. May be null if help option is disabled.\n    this._addImplicitHelpCommand = undefined; // undecided whether true or false yet, not inherited\n    /** @type {Command} */\n    this._helpCommand = undefined; // lazy initialised, inherited\n    this._helpConfiguration = {};\n    /** @type {string | undefined} */\n    this._helpGroupHeading = undefined; // soft initialised when added to parent\n    /** @type {string | undefined} */\n    this._defaultCommandGroup = undefined;\n    /** @type {string | undefined} */\n    this._defaultOptionGroup = undefined;\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} `this` command for chaining\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._helpOption = sourceCommand._helpOption;\n    this._helpCommand = sourceCommand._helpCommand;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue =\n      sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * @returns {Command[]}\n   * @private\n   */\n\n  _getCommandAndAncestors() {\n    const result = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    for (let command = this; command; command = command.parent) {\n      result.push(command);\n    }\n    return result;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {(object | string)} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this._registerCommand(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  }\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  }\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  }\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {object} [configuration] - configuration options\n   * @return {(Command | object)} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // change how output being written, defaults to stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // change how output being written for errors, defaults to writeErr\n   *     outputError(str, write) // used for displaying errors and not used for displaying help\n   *     // specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // color support, currently only used with Help\n   *     getOutHasColors()\n   *     getErrHasColors()\n   *     stripColor() // used to remove ANSI escape codes if output does not have colors\n   *\n   * @param {object} [configuration] - configuration options\n   * @return {(Command | object)} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    this._outputConfiguration = {\n      ...this._outputConfiguration,\n      ...configuration,\n    };\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {(boolean|string)} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) {\n      throw new Error(`Command passed to .addCommand() must have a name\n- specify the name in Command constructor or using .name()`);\n    }\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this._registerCommand(cmd);\n    cmd.parent = this;\n    cmd._checkForBrokenPassThrough();\n\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  }\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom argument processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, parseArg, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof parseArg === 'function') {\n      argument.default(defaultValue).argParser(parseArg);\n    } else {\n      argument.default(parseArg);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names\n      .trim()\n      .split(/ +/)\n      .forEach((detail) => {\n        this.argument(detail);\n      });\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this.registeredArguments.slice(-1)[0];\n    if (previousArgument?.variadic) {\n      throw new Error(\n        `only the last argument can be variadic '${previousArgument.name()}'`,\n      );\n    }\n    if (\n      argument.required &&\n      argument.defaultValue !== undefined &&\n      argument.parseArg === undefined\n    ) {\n      throw new Error(\n        `a default value for a required argument is never used: '${argument.name()}'`,\n      );\n    }\n    this.registeredArguments.push(argument);\n    return this;\n  }\n\n  /**\n   * Customise or override default help command. By default a help command is automatically added if your command has subcommands.\n   *\n   * @example\n   *    program.helpCommand('help [cmd]');\n   *    program.helpCommand('help [cmd]', 'show help');\n   *    program.helpCommand(false); // suppress default help command\n   *    program.helpCommand(true); // add help command even if no subcommands\n   *\n   * @param {string|boolean} enableOrNameAndArgs - enable with custom name and/or arguments, or boolean to override whether added\n   * @param {string} [description] - custom description\n   * @return {Command} `this` command for chaining\n   */\n\n  helpCommand(enableOrNameAndArgs, description) {\n    if (typeof enableOrNameAndArgs === 'boolean') {\n      this._addImplicitHelpCommand = enableOrNameAndArgs;\n      if (enableOrNameAndArgs && this._defaultCommandGroup) {\n        // make the command to store the group\n        this._initCommandGroup(this._getHelpCommand());\n      }\n      return this;\n    }\n\n    const nameAndArgs = enableOrNameAndArgs ?? 'help [command]';\n    const [, helpName, helpArgs] = nameAndArgs.match(/([^ ]+) *(.*)/);\n    const helpDescription = description ?? 'display help for command';\n\n    const helpCommand = this.createCommand(helpName);\n    helpCommand.helpOption(false);\n    if (helpArgs) helpCommand.arguments(helpArgs);\n    if (helpDescription) helpCommand.description(helpDescription);\n\n    this._addImplicitHelpCommand = true;\n    this._helpCommand = helpCommand;\n    // init group unless lazy create\n    if (enableOrNameAndArgs || description) this._initCommandGroup(helpCommand);\n\n    return this;\n  }\n\n  /**\n   * Add prepared custom help command.\n   *\n   * @param {(Command|string|boolean)} helpCommand - custom help command, or deprecated enableOrNameAndArgs as for `.helpCommand()`\n   * @param {string} [deprecatedDescription] - deprecated custom description used with custom name only\n   * @return {Command} `this` command for chaining\n   */\n  addHelpCommand(helpCommand, deprecatedDescription) {\n    // If not passed an object, call through to helpCommand for backwards compatibility,\n    // as addHelpCommand was originally used like helpCommand is now.\n    if (typeof helpCommand !== 'object') {\n      this.helpCommand(helpCommand, deprecatedDescription);\n      return this;\n    }\n\n    this._addImplicitHelpCommand = true;\n    this._helpCommand = helpCommand;\n    this._initCommandGroup(helpCommand);\n    return this;\n  }\n\n  /**\n   * Lazy create help command.\n   *\n   * @return {(Command|null)}\n   * @package\n   */\n  _getHelpCommand() {\n    const hasImplicitHelpCommand =\n      this._addImplicitHelpCommand ??\n      (this.commands.length &&\n        !this._actionHandler &&\n        !this._findCommand('help'));\n\n    if (hasImplicitHelpCommand) {\n      if (this._helpCommand === undefined) {\n        this.helpCommand(undefined, undefined); // use default name and description\n      }\n      return this._helpCommand;\n    }\n    return null;\n  }\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preSubcommand', 'preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  }\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  }\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this.registeredArguments.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  }\n\n  /**\n   * Wrap parseArgs to catch 'commander.invalidArgument'.\n   *\n   * @param {(Option | Argument)} target\n   * @param {string} value\n   * @param {*} previous\n   * @param {string} invalidArgumentMessage\n   * @private\n   */\n\n  _callParseArg(target, value, previous, invalidArgumentMessage) {\n    try {\n      return target.parseArg(value, previous);\n    } catch (err) {\n      if (err.code === 'commander.invalidArgument') {\n        const message = `${invalidArgumentMessage} ${err.message}`;\n        this.error(message, { exitCode: err.exitCode, code: err.code });\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Check for option flag conflicts.\n   * Register option if no conflicts found, or throw on conflict.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  _registerOption(option) {\n    const matchingOption =\n      (option.short && this._findOption(option.short)) ||\n      (option.long && this._findOption(option.long));\n    if (matchingOption) {\n      const matchingFlag =\n        option.long && this._findOption(option.long)\n          ? option.long\n          : option.short;\n      throw new Error(`Cannot add option '${option.flags}'${this._name && ` to command '${this._name}'`} due to conflicting flag '${matchingFlag}'\n-  already used by option '${matchingOption.flags}'`);\n    }\n\n    this._initOptionGroup(option);\n    this.options.push(option);\n  }\n\n  /**\n   * Check for command name and alias conflicts with existing commands.\n   * Register command if no conflicts found, or throw on conflict.\n   *\n   * @param {Command} command\n   * @private\n   */\n\n  _registerCommand(command) {\n    const knownBy = (cmd) => {\n      return [cmd.name()].concat(cmd.aliases());\n    };\n\n    const alreadyUsed = knownBy(command).find((name) =>\n      this._findCommand(name),\n    );\n    if (alreadyUsed) {\n      const existingCmd = knownBy(this._findCommand(alreadyUsed)).join('|');\n      const newCmd = knownBy(command).join('|');\n      throw new Error(\n        `cannot add command '${newCmd}' as already have command '${existingCmd}'`,\n      );\n    }\n\n    this._initCommandGroup(command);\n    this.commands.push(command);\n  }\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    this._registerOption(option);\n\n    const oname = option.name();\n    const name = option.attributeName();\n\n    // store default value\n    if (option.negate) {\n      // --no-foo is special and defaults foo to true, unless a --foo option is already defined\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      if (!this._findOption(positiveLongFlag)) {\n        this.setOptionValueWithSource(\n          name,\n          option.defaultValue === undefined ? true : option.defaultValue,\n          'default',\n        );\n      }\n    } else if (option.defaultValue !== undefined) {\n      this.setOptionValueWithSource(name, option.defaultValue, 'default');\n    }\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // val is null for optional option used without an optional-argument.\n      // val is undefined for boolean and negated option.\n      if (val == null && option.presetArg !== undefined) {\n        val = option.presetArg;\n      }\n\n      // custom processing\n      const oldValue = this.getOptionValue(name);\n      if (val !== null && option.parseArg) {\n        val = this._callParseArg(option, val, oldValue, invalidValueMessage);\n      } else if (val !== null && option.variadic) {\n        val = option._collectValue(val, oldValue);\n      }\n\n      // Fill-in appropriate missing values. Long winded but easy to follow.\n      if (val == null) {\n        if (option.negate) {\n          val = false;\n        } else if (option.isBoolean() || option.optional) {\n          val = true;\n        } else {\n          val = ''; // not normal, parseArg might have failed or be a mock function for testing\n        }\n      }\n      this.setOptionValueWithSource(name, val, valueSource);\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @return {Command} `this` command for chaining\n   * @private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    if (typeof flags === 'object' && flags instanceof Option) {\n      throw new Error(\n        'To add an Option object use addOption() instead of option() or requiredOption()',\n      );\n    }\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description`, and optional argument parsing function or `defaultValue` or both.\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space. A required\n   * option-argument is indicated by `<>` and an optional option-argument by `[]`.\n   *\n   * See the README for more details, and see also addOption() and requiredOption().\n   *\n   * @example\n   * program\n   *     .option('-p, --pepper', 'add pepper')\n   *     .option('--pt, --pizza-type <TYPE>', 'type of pizza') // required option-argument\n   *     .option('-c, --cheese [CHEESE]', 'add extra cheese', 'mozzarella') // optional option-argument with default\n   *     .option('-t, --tip <VALUE>', 'add tip to purchase cost', parseFloat) // custom parse function\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, parseArg, defaultValue) {\n    return this._optionEx({}, flags, description, parseArg, defaultValue);\n  }\n\n  /**\n   * Add a required option which must have a value after parsing. This usually means\n   * the option must be specified on the command line. (Otherwise the same as .option().)\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  requiredOption(flags, description, parseArg, defaultValue) {\n    return this._optionEx(\n      { mandatory: true },\n      flags,\n      description,\n      parseArg,\n      defaultValue,\n    );\n  }\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {boolean} [combine] - if `true` or omitted, an optional value can be specified directly after the flag.\n   * @return {Command} `this` command for chaining\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  }\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {boolean} [allowUnknown] - if `true` or omitted, no error will be thrown for unknown options.\n   * @return {Command} `this` command for chaining\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  }\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {boolean} [allowExcess] - if `true` or omitted, no error will be thrown for excess arguments.\n   * @return {Command} `this` command for chaining\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  }\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {boolean} [positional]\n   * @return {Command} `this` command for chaining\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  }\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {boolean} [passThrough] for unknown options.\n   * @return {Command} `this` command for chaining\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    this._checkForBrokenPassThrough();\n    return this;\n  }\n\n  /**\n   * @private\n   */\n\n  _checkForBrokenPassThrough() {\n    if (\n      this.parent &&\n      this._passThroughOptions &&\n      !this.parent._enablePositionalOptions\n    ) {\n      throw new Error(\n        `passThroughOptions cannot be used for '${this._name}' without turning on enablePositionalOptions for parent command(s)`,\n      );\n    }\n  }\n\n  /**\n   * Whether to store option values as properties on command object,\n   * or store separately (specify false). In both cases the option values can be accessed using .opts().\n   *\n   * @param {boolean} [storeAsProperties=true]\n   * @return {Command} `this` command for chaining\n   */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    if (Object.keys(this._optionValues).length) {\n      throw new Error(\n        'call .storeOptionsAsProperties() before setting option values',\n      );\n    }\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    return this;\n  }\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  }\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    return this.setOptionValueWithSource(key, value, undefined);\n  }\n\n  /**\n   * Store option value and where the value came from.\n   *\n   * @param {string} key\n   * @param {object} value\n   * @param {string} source - expected values are default/config/env/cli/implied\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValueWithSource(key, value, source) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n   * Get source of option value.\n   * Expected values are default | config | env | cli | implied\n   *\n   * @param {string} key\n   * @return {string}\n   */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  }\n\n  /**\n   * Get source of option value. See also .optsWithGlobals().\n   * Expected values are default | config | env | cli | implied\n   *\n   * @param {string} key\n   * @return {string}\n   */\n\n  getOptionValueSourceWithGlobals(key) {\n    // global overwrites local, like optsWithGlobals\n    let source;\n    this._getCommandAndAncestors().forEach((cmd) => {\n      if (cmd.getOptionValueSource(key) !== undefined) {\n        source = cmd.getOptionValueSource(key);\n      }\n    });\n    return source;\n  }\n\n  /**\n   * Get user arguments from implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.\n   *\n   * @private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // auto-detect argument conventions if nothing supplied\n    if (argv === undefined && parseOptions.from === undefined) {\n      if (process.versions?.electron) {\n        parseOptions.from = 'electron';\n      }\n      // check node specific options for scenarios where user CLI args follow executable without scriptname\n      const execArgv = process.execArgv ?? [];\n      if (\n        execArgv.includes('-e') ||\n        execArgv.includes('--eval') ||\n        execArgv.includes('-p') ||\n        execArgv.includes('--print')\n      ) {\n        parseOptions.from = 'eval'; // internal usage, not documented\n      }\n    }\n\n    // default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n    }\n    this.rawArgs = argv.slice();\n\n    // extract the user args and scriptPath\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: because defaultApp is an unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      case 'eval':\n        userArgs = argv.slice(1);\n        break;\n      default:\n        throw new Error(\n          `unexpected parse option { from: '${parseOptions.from}' }`,\n        );\n    }\n\n    // Find default name for program from arguments.\n    if (!this._name && this._scriptPath)\n      this.nameFromFilename(this._scriptPath);\n    this._name = this._name || 'program';\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async.\n   *\n   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n   *\n   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n   * - `'user'`: just user arguments\n   *\n   * @example\n   * program.parse(); // parse process.argv and auto-detect electron and special node flags\n   * program.parse(process.argv); // assume argv[0] is app and argv[1] is script\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    this._prepareForParse();\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n   *\n   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n   * - `'user'`: just user arguments\n   *\n   * @example\n   * await program.parseAsync(); // parse process.argv and auto-detect electron and special node flags\n   * await program.parseAsync(process.argv); // assume argv[0] is app and argv[1] is script\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    this._prepareForParse();\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  _prepareForParse() {\n    if (this._savedState === null) {\n      this.saveStateBeforeParse();\n    } else {\n      this.restoreStateBeforeParse();\n    }\n  }\n\n  /**\n   * Called the first time parse is called to save state and allow a restore before subsequent calls to parse.\n   * Not usually called directly, but available for subclasses to save their custom state.\n   *\n   * This is called in a lazy way. Only commands used in parsing chain will have state saved.\n   */\n  saveStateBeforeParse() {\n    this._savedState = {\n      // name is stable if supplied by author, but may be unspecified for root command and deduced during parsing\n      _name: this._name,\n      // option values before parse have default values (including false for negated options)\n      // shallow clones\n      _optionValues: { ...this._optionValues },\n      _optionValueSources: { ...this._optionValueSources },\n    };\n  }\n\n  /**\n   * Restore state before parse for calls after the first.\n   * Not usually called directly, but available for subclasses to save their custom state.\n   *\n   * This is called in a lazy way. Only commands used in parsing chain will have state restored.\n   */\n  restoreStateBeforeParse() {\n    if (this._storeOptionsAsProperties)\n      throw new Error(`Can not call parse again when storeOptionsAsProperties is true.\n- either make a new Command for each call to parse, or stop storing options as properties`);\n\n    // clear state from _prepareUserArgs\n    this._name = this._savedState._name;\n    this._scriptPath = null;\n    this.rawArgs = [];\n    // clear state from setOptionValueWithSource\n    this._optionValues = { ...this._savedState._optionValues };\n    this._optionValueSources = { ...this._savedState._optionValueSources };\n    // clear state from _parseCommand\n    this.args = [];\n    // clear state from _processArguments\n    this.processedArgs = [];\n  }\n\n  /**\n   * Throw if expected executable is missing. Add lots of help for author.\n   *\n   * @param {string} executableFile\n   * @param {string} executableDir\n   * @param {string} subcommandName\n   */\n  _checkForMissingExecutable(executableFile, executableDir, subcommandName) {\n    if (fs.existsSync(executableFile)) return;\n\n    const executableDirMessage = executableDir\n      ? `searched for local subcommand relative to directory '${executableDir}'`\n      : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n    const executableMissing = `'${executableFile}' does not exist\n - if '${subcommandName}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\n - ${executableDirMessage}`;\n    throw new Error(executableMissing);\n  }\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    function findFile(baseDir, baseName) {\n      // Look for specified file\n      const localBin = path.resolve(baseDir, baseName);\n      if (fs.existsSync(localBin)) return localBin;\n\n      // Stop looking if candidate already has an expected extension.\n      if (sourceExt.includes(path.extname(baseName))) return undefined;\n\n      // Try all the extensions.\n      const foundExt = sourceExt.find((ext) =>\n        fs.existsSync(`${localBin}${ext}`),\n      );\n      if (foundExt) return `${localBin}${foundExt}`;\n\n      return undefined;\n    }\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // executableFile and executableDir might be full path, or just a name\n    let executableFile =\n      subcommand._executableFile || `${this._name}-${subcommand._name}`;\n    let executableDir = this._executableDir || '';\n    if (this._scriptPath) {\n      let resolvedScriptPath; // resolve possible symlink for installed npm binary\n      try {\n        resolvedScriptPath = fs.realpathSync(this._scriptPath);\n      } catch {\n        resolvedScriptPath = this._scriptPath;\n      }\n      executableDir = path.resolve(\n        path.dirname(resolvedScriptPath),\n        executableDir,\n      );\n    }\n\n    // Look for a local file in preference to a command in PATH.\n    if (executableDir) {\n      let localFile = findFile(executableDir, executableFile);\n\n      // Legacy search using prefix of script name instead of command name\n      if (!localFile && !subcommand._executableFile && this._scriptPath) {\n        const legacyName = path.basename(\n          this._scriptPath,\n          path.extname(this._scriptPath),\n        );\n        if (legacyName !== this._name) {\n          localFile = findFile(\n            executableDir,\n            `${legacyName}-${subcommand._name}`,\n          );\n        }\n      }\n      executableFile = localFile || executableFile;\n    }\n\n    launchWithNode = sourceExt.includes(path.extname(executableFile));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(executableFile);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(executableFile, args, { stdio: 'inherit' });\n      }\n    } else {\n      this._checkForMissingExecutable(\n        executableFile,\n        executableDir,\n        subcommand._name,\n      );\n      args.unshift(executableFile);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    if (!proc.killed) {\n      // testing mainly to avoid leak warnings during unit tests with mocked spawn\n      const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n      signals.forEach((signal) => {\n        process.on(signal, () => {\n          if (proc.killed === false && proc.exitCode === null) {\n            // @ts-ignore because signals not typed to known strings\n            proc.kill(signal);\n          }\n        });\n      });\n    }\n\n    // By default terminate process when spawned process terminates.\n    const exitCallback = this._exitCallback;\n    proc.on('close', (code) => {\n      code = code ?? 1; // code is null if spawned process terminated due to a signal\n      if (!exitCallback) {\n        process.exit(code);\n      } else {\n        exitCallback(\n          new CommanderError(\n            code,\n            'commander.executeSubCommandAsync',\n            '(close)',\n          ),\n        );\n      }\n    });\n    proc.on('error', (err) => {\n      // @ts-ignore: because err.code is an unknown property\n      if (err.code === 'ENOENT') {\n        this._checkForMissingExecutable(\n          executableFile,\n          executableDir,\n          subcommand._name,\n        );\n        // @ts-ignore: because err.code is an unknown property\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${executableFile}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(\n          1,\n          'commander.executeSubCommandAsync',\n          '(error)',\n        );\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  }\n\n  /**\n   * @private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    subCommand._prepareForParse();\n    let promiseChain;\n    promiseChain = this._chainOrCallSubCommandHook(\n      promiseChain,\n      subCommand,\n      'preSubcommand',\n    );\n    promiseChain = this._chainOrCall(promiseChain, () => {\n      if (subCommand._executableHandler) {\n        this._executeSubCommand(subCommand, operands.concat(unknown));\n      } else {\n        return subCommand._parseCommand(operands, unknown);\n      }\n    });\n    return promiseChain;\n  }\n\n  /**\n   * Invoke help directly if possible, or dispatch if necessary.\n   * e.g. help foo\n   *\n   * @private\n   */\n\n  _dispatchHelpCommand(subcommandName) {\n    if (!subcommandName) {\n      this.help();\n    }\n    const subCommand = this._findCommand(subcommandName);\n    if (subCommand && !subCommand._executableHandler) {\n      subCommand.help();\n    }\n\n    // Fallback to parsing the help flag to invoke the help.\n    return this._dispatchSubcommand(\n      subcommandName,\n      [],\n      [this._getHelpOption()?.long ?? this._getHelpOption()?.short ?? '--help'],\n    );\n  }\n\n  /**\n   * Check this.args against expected this.registeredArguments.\n   *\n   * @private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this.registeredArguments.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (\n      this.registeredArguments.length > 0 &&\n      this.registeredArguments[this.registeredArguments.length - 1].variadic\n    ) {\n      return;\n    }\n    if (this.args.length > this.registeredArguments.length) {\n      this._excessArguments(this.args);\n    }\n  }\n\n  /**\n   * Process this.args using this.registeredArguments and save as this.processedArgs!\n   *\n   * @private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        const invalidValueMessage = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'.`;\n        parsedValue = this._callParseArg(\n          argument,\n          value,\n          previous,\n          invalidValueMessage,\n        );\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this.registeredArguments.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {Function} fn\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise?.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {string} event\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    this._getCommandAndAncestors()\n      .reverse()\n      .filter((cmd) => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach((hookedCommand) => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {Command} subCommand\n   * @param {string} event\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCallSubCommandHook(promise, subCommand, event) {\n    let result = promise;\n    if (this._lifeCycleHooks[event] !== undefined) {\n      this._lifeCycleHooks[event].forEach((hook) => {\n        result = this._chainOrCall(result, () => {\n          return hook(this, subCommand);\n        });\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    this._parseOptionsImplied();\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (\n      this._getHelpCommand() &&\n      operands[0] === this._getHelpCommand().name()\n    ) {\n      return this._dispatchHelpCommand(operands[1]);\n    }\n    if (this._defaultCommandName) {\n      this._outputHelpIfRequested(unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(\n        this._defaultCommandName,\n        operands,\n        unknown,\n      );\n    }\n    if (\n      this.commands.length &&\n      this.args.length === 0 &&\n      !this._actionHandler &&\n      !this._defaultCommandName\n    ) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    this._outputHelpIfRequested(parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let promiseChain;\n      promiseChain = this._chainOrCallHooks(promiseChain, 'preAction');\n      promiseChain = this._chainOrCall(promiseChain, () =>\n        this._actionHandler(this.processedArgs),\n      );\n      if (this.parent) {\n        promiseChain = this._chainOrCall(promiseChain, () => {\n          this.parent.emit(commandEvent, operands, unknown); // legacy\n        });\n      }\n      promiseChain = this._chainOrCallHooks(promiseChain, 'postAction');\n      return promiseChain;\n    }\n    if (this.parent?.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) {\n        // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  }\n\n  /**\n   * Find matching command.\n   *\n   * @private\n   * @return {Command | undefined}\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(\n      (cmd) => cmd._name === name || cmd._aliases.includes(name),\n    );\n  }\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @package\n   */\n\n  _findOption(arg) {\n    return this.options.find((option) => option.is(arg));\n  }\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd.options.forEach((anOption) => {\n        if (\n          anOption.mandatory &&\n          cmd.getOptionValue(anOption.attributeName()) === undefined\n        ) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together in this.\n   *\n   * @private\n   */\n  _checkForConflictingLocalOptions() {\n    const definedNonDefaultOptions = this.options.filter((option) => {\n      const optionKey = option.attributeName();\n      if (this.getOptionValue(optionKey) === undefined) {\n        return false;\n      }\n      return this.getOptionValueSource(optionKey) !== 'default';\n    });\n\n    const optionsWithConflicting = definedNonDefaultOptions.filter(\n      (option) => option.conflictsWith.length > 0,\n    );\n\n    optionsWithConflicting.forEach((option) => {\n      const conflictingAndDefined = definedNonDefaultOptions.find((defined) =>\n        option.conflictsWith.includes(defined.attributeName()),\n      );\n      if (conflictingAndDefined) {\n        this._conflictingOption(option, conflictingAndDefined);\n      }\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @private\n   */\n  _checkForConflictingOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd._checkForConflictingLocalOptions();\n    });\n  }\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Side effects: modifies command by storing options. Does not reset state if called again.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {string[]} args\n   * @return {{operands: string[], unknown: string[]}}\n   */\n\n  parseOptions(args) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    const negativeNumberArg = (arg) => {\n      // return false if not a negative number\n      if (!/^-\\d*\\.?\\d+(e[+-]?\\d+)?$/.test(arg)) return false;\n      // negative number is ok unless digit used as an option in command hierarchy\n      return !this._getCommandAndAncestors().some((cmd) =>\n        cmd.options\n          .map((opt) => opt.short)\n          .some((short) => /^-\\d$/.test(short)),\n      );\n    };\n\n    // parse options\n    let activeVariadicOption = null;\n    let activeGroup = null; // working through group of short options, like -abc\n    let i = 0;\n    while (i < args.length || activeGroup) {\n      const arg = activeGroup ?? args[i++];\n      activeGroup = null;\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args.slice(i));\n        break;\n      }\n\n      if (\n        activeVariadicOption &&\n        (!maybeOption(arg) || negativeNumberArg(arg))\n      ) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args[i++];\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (\n              i < args.length &&\n              (!maybeOption(args[i]) || negativeNumberArg(args[i]))\n            ) {\n              value = args[i++];\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else {\n            // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (\n            option.required ||\n            (option.optional && this._combineFlagAndOptionalValue)\n          ) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option\n            this.emit(`option:${option.name()}`);\n            // remove the processed option and keep processing group\n            activeGroup = `-${arg.slice(2)}`;\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      // A negative number in a leaf command is not an unknown option.\n      if (\n        dest === operands &&\n        maybeOption(arg) &&\n        !(this.commands.length === 0 && negativeNumberArg(arg))\n      ) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if (\n        (this._enablePositionalOptions || this._passThroughOptions) &&\n        operands.length === 0 &&\n        unknown.length === 0\n      ) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          unknown.push(...args.slice(i));\n          break;\n        } else if (\n          this._getHelpCommand() &&\n          arg === this._getHelpCommand().name()\n        ) {\n          operands.push(arg, ...args.slice(i));\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg, ...args.slice(i));\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg, ...args.slice(i));\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  }\n\n  /**\n   * Return an object containing local option values as key-value pairs.\n   *\n   * @return {object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] =\n          key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  }\n\n  /**\n   * Return an object containing merged local and global option values as key-value pairs.\n   *\n   * @return {object}\n   */\n  optsWithGlobals() {\n    // globals overwrite locals\n    return this._getCommandAndAncestors().reduce(\n      (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),\n      {},\n    );\n  }\n\n  /**\n   * Display error message and exit (or call exitOverride).\n   *\n   * @param {string} message\n   * @param {object} [errorOptions]\n   * @param {string} [errorOptions.code] - an id string representing the error\n   * @param {number} [errorOptions.exitCode] - used with process.exit\n   */\n  error(message, errorOptions) {\n    // output handling\n    this._outputConfiguration.outputError(\n      `${message}\\n`,\n      this._outputConfiguration.writeErr,\n    );\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n\n    // exit handling\n    const config = errorOptions || {};\n    const exitCode = config.exitCode || 1;\n    const code = config.code || 'commander.error';\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (\n          this.getOptionValue(optionKey) === undefined ||\n          ['default', 'config', 'env'].includes(\n            this.getOptionValueSource(optionKey),\n          )\n        ) {\n          if (option.required || option.optional) {\n            // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else {\n            // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply any implied option values, if option is undefined or default value.\n   *\n   * @private\n   */\n  _parseOptionsImplied() {\n    const dualHelper = new DualOptions(this.options);\n    const hasCustomOptionValue = (optionKey) => {\n      return (\n        this.getOptionValue(optionKey) !== undefined &&\n        !['default', 'implied'].includes(this.getOptionValueSource(optionKey))\n      );\n    };\n    this.options\n      .filter(\n        (option) =>\n          option.implied !== undefined &&\n          hasCustomOptionValue(option.attributeName()) &&\n          dualHelper.valueFromOption(\n            this.getOptionValue(option.attributeName()),\n            option,\n          ),\n      )\n      .forEach((option) => {\n        Object.keys(option.implied)\n          .filter((impliedKey) => !hasCustomOptionValue(impliedKey))\n          .forEach((impliedKey) => {\n            this.setOptionValueWithSource(\n              impliedKey,\n              option.implied[impliedKey],\n              'implied',\n            );\n          });\n      });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this.error(message, { code: 'commander.missingArgument' });\n  }\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this.error(message, { code: 'commander.optionMissingArgument' });\n  }\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this.error(message, { code: 'commander.missingMandatoryOptionValue' });\n  }\n\n  /**\n   * `Option` conflicts with another option.\n   *\n   * @param {Option} option\n   * @param {Option} conflictingOption\n   * @private\n   */\n  _conflictingOption(option, conflictingOption) {\n    // The calling code does not know whether a negated option is the source of the\n    // value, so do some work to take an educated guess.\n    const findBestOptionFromValue = (option) => {\n      const optionKey = option.attributeName();\n      const optionValue = this.getOptionValue(optionKey);\n      const negativeOption = this.options.find(\n        (target) => target.negate && optionKey === target.attributeName(),\n      );\n      const positiveOption = this.options.find(\n        (target) => !target.negate && optionKey === target.attributeName(),\n      );\n      if (\n        negativeOption &&\n        ((negativeOption.presetArg === undefined && optionValue === false) ||\n          (negativeOption.presetArg !== undefined &&\n            optionValue === negativeOption.presetArg))\n      ) {\n        return negativeOption;\n      }\n      return positiveOption || option;\n    };\n\n    const getErrorMessage = (option) => {\n      const bestOption = findBestOptionFromValue(option);\n      const optionKey = bestOption.attributeName();\n      const source = this.getOptionValueSource(optionKey);\n      if (source === 'env') {\n        return `environment variable '${bestOption.envVar}'`;\n      }\n      return `option '${bestOption.flags}'`;\n    };\n\n    const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;\n    this.error(message, { code: 'commander.conflictingOption' });\n  }\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      let command = this;\n      do {\n        const moreFlags = command\n          .createHelp()\n          .visibleOptions(command)\n          .filter((option) => option.long)\n          .map((option) => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownOption' });\n  }\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this.registeredArguments.length;\n    const s = expected === 1 ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this.error(message, { code: 'commander.excessArguments' });\n  }\n\n  /**\n   * Unknown command.\n   *\n   * @private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp()\n        .visibleCommands(this)\n        .forEach((command) => {\n          candidateNames.push(command.name());\n          // just visible alias\n          if (command.alias()) candidateNames.push(command.alias());\n        });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownCommand' });\n  }\n\n  /**\n   * Get or set the program version.\n   *\n   * This method auto-registers the \"-V, --version\" option which will print the version number.\n   *\n   * You can optionally supply the flags and description to override the defaults.\n   *\n   * @param {string} [str]\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {(this | string | undefined)} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this._registerOption(versionOption);\n\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  }\n\n  /**\n   * Set the description.\n   *\n   * @param {string} [str]\n   * @param {object} [argsDescription]\n   * @return {(string|Command)}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined)\n      return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  }\n\n  /**\n   * Set the summary. Used when listed as subcommand of parent.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n  summary(str) {\n    if (str === undefined) return this._summary;\n    this._summary = str;\n    return this;\n  }\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {(string|Command)}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let command = this;\n    if (\n      this.commands.length !== 0 &&\n      this.commands[this.commands.length - 1]._executableHandler\n    ) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name)\n      throw new Error(\"Command alias can't be the same as its name\");\n    const matchingCommand = this.parent?._findCommand(alias);\n    if (matchingCommand) {\n      // c.f. _registerCommand\n      const existingCmd = [matchingCommand.name()]\n        .concat(matchingCommand.aliases())\n        .join('|');\n      throw new Error(\n        `cannot add alias '${alias}' to command '${this.name()}' as already have command '${existingCmd}'`,\n      );\n    }\n\n    command._aliases.push(alias);\n    return this;\n  }\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {(string[]|Command)}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  }\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this.registeredArguments.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return []\n        .concat(\n          this.options.length || this._helpOption !== null ? '[options]' : [],\n          this.commands.length ? '[command]' : [],\n          this.registeredArguments.length ? args : [],\n        )\n        .join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  }\n\n  /**\n   * Get or set the name of the command.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  }\n\n  /**\n   * Set/get the help group heading for this subcommand in parent command's help.\n   *\n   * @param {string} [heading]\n   * @return {Command | string}\n   */\n\n  helpGroup(heading) {\n    if (heading === undefined) return this._helpGroupHeading ?? '';\n    this._helpGroupHeading = heading;\n    return this;\n  }\n\n  /**\n   * Set/get the default help group heading for subcommands added to this command.\n   * (This does not override a group set directly on the subcommand using .helpGroup().)\n   *\n   * @example\n   * program.commandsGroup('Development Commands:);\n   * program.command('watch')...\n   * program.command('lint')...\n   * ...\n   *\n   * @param {string} [heading]\n   * @returns {Command | string}\n   */\n  commandsGroup(heading) {\n    if (heading === undefined) return this._defaultCommandGroup ?? '';\n    this._defaultCommandGroup = heading;\n    return this;\n  }\n\n  /**\n   * Set/get the default help group heading for options added to this command.\n   * (This does not override a group set directly on the option using .helpGroup().)\n   *\n   * @example\n   * program\n   *   .optionsGroup('Development Options:')\n   *   .option('-d, --debug', 'output extra debugging')\n   *   .option('-p, --profile', 'output profiling information')\n   *\n   * @param {string} [heading]\n   * @returns {Command | string}\n   */\n  optionsGroup(heading) {\n    if (heading === undefined) return this._defaultOptionGroup ?? '';\n    this._defaultOptionGroup = heading;\n    return this;\n  }\n\n  /**\n   * @param {Option} option\n   * @private\n   */\n  _initOptionGroup(option) {\n    if (this._defaultOptionGroup && !option.helpGroupHeading)\n      option.helpGroup(this._defaultOptionGroup);\n  }\n\n  /**\n   * @param {Command} cmd\n   * @private\n   */\n  _initCommandGroup(cmd) {\n    if (this._defaultCommandGroup && !cmd.helpGroup())\n      cmd.helpGroup(this._defaultCommandGroup);\n  }\n\n  /**\n   * Set the name of the command from script filename, such as process.argv[1],\n   * or require.main.filename, or __filename.\n   *\n   * (Used internally and public although not documented in README.)\n   *\n   * @example\n   * program.nameFromFilename(require.main.filename);\n   *\n   * @param {string} filename\n   * @return {Command}\n   */\n\n  nameFromFilename(filename) {\n    this._name = path.basename(filename, path.extname(filename));\n\n    return this;\n  }\n\n  /**\n   * Get or set the directory for searching for executable subcommands of this command.\n   *\n   * @example\n   * program.executableDir(__dirname);\n   * // or\n   * program.executableDir('subcommands');\n   *\n   * @param {string} [path]\n   * @return {(string|null|Command)}\n   */\n\n  executableDir(path) {\n    if (path === undefined) return this._executableDir;\n    this._executableDir = path;\n    return this;\n  }\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    const context = this._getOutputContext(contextOptions);\n    helper.prepareContext({\n      error: context.error,\n      helpWidth: context.helpWidth,\n      outputHasColors: context.hasColors,\n    });\n    const text = helper.formatHelp(this, helper);\n    if (context.hasColors) return text;\n    return this._outputConfiguration.stripColor(text);\n  }\n\n  /**\n   * @typedef HelpContext\n   * @type {object}\n   * @property {boolean} error\n   * @property {number} helpWidth\n   * @property {boolean} hasColors\n   * @property {function} write - includes stripColor if needed\n   *\n   * @returns {HelpContext}\n   * @private\n   */\n\n  _getOutputContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const error = !!contextOptions.error;\n    let baseWrite;\n    let hasColors;\n    let helpWidth;\n    if (error) {\n      baseWrite = (str) => this._outputConfiguration.writeErr(str);\n      hasColors = this._outputConfiguration.getErrHasColors();\n      helpWidth = this._outputConfiguration.getErrHelpWidth();\n    } else {\n      baseWrite = (str) => this._outputConfiguration.writeOut(str);\n      hasColors = this._outputConfiguration.getOutHasColors();\n      helpWidth = this._outputConfiguration.getOutHelpWidth();\n    }\n    const write = (str) => {\n      if (!hasColors) str = this._outputConfiguration.stripColor(str);\n      return baseWrite(str);\n    };\n    return { error, write, hasColors, helpWidth };\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n\n    const outputContext = this._getOutputContext(contextOptions);\n    /** @type {HelpTextEventContext} */\n    const eventContext = {\n      error: outputContext.error,\n      write: outputContext.write,\n      command: this,\n    };\n\n    this._getCommandAndAncestors()\n      .reverse()\n      .forEach((command) => command.emit('beforeAllHelp', eventContext));\n    this.emit('beforeHelp', eventContext);\n\n    let helpInformation = this.helpInformation({ error: outputContext.error });\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (\n        typeof helpInformation !== 'string' &&\n        !Buffer.isBuffer(helpInformation)\n      ) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    outputContext.write(helpInformation);\n\n    if (this._getHelpOption()?.long) {\n      this.emit(this._getHelpOption().long); // deprecated\n    }\n    this.emit('afterHelp', eventContext);\n    this._getCommandAndAncestors().forEach((command) =>\n      command.emit('afterAllHelp', eventContext),\n    );\n  }\n\n  /**\n   * You can pass in flags and a description to customise the built-in help option.\n   * Pass in false to disable the built-in help option.\n   *\n   * @example\n   * program.helpOption('-?, --help' 'show help'); // customise\n   * program.helpOption(false); // disable\n   *\n   * @param {(string | boolean)} flags\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    // Support enabling/disabling built-in help option.\n    if (typeof flags === 'boolean') {\n      if (flags) {\n        if (this._helpOption === null) this._helpOption = undefined; // reenable\n        if (this._defaultOptionGroup) {\n          // make the option to store the group\n          this._initOptionGroup(this._getHelpOption());\n        }\n      } else {\n        this._helpOption = null; // disable\n      }\n      return this;\n    }\n\n    // Customise flags and description.\n    this._helpOption = this.createOption(\n      flags ?? '-h, --help',\n      description ?? 'display help for command',\n    );\n    // init group unless lazy create\n    if (flags || description) this._initOptionGroup(this._helpOption);\n\n    return this;\n  }\n\n  /**\n   * Lazy create help option.\n   * Returns null if has been disabled with .helpOption(false).\n   *\n   * @returns {(Option | null)} the help option\n   * @package\n   */\n  _getHelpOption() {\n    // Lazy create help option on demand.\n    if (this._helpOption === undefined) {\n      this.helpOption(undefined, undefined);\n    }\n    return this._helpOption;\n  }\n\n  /**\n   * Supply your own option to use for the built-in help option.\n   * This is an alternative to using helpOption() to customise the flags and description etc.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addHelpOption(option) {\n    this._helpOption = option;\n    this._initOptionGroup(option);\n    return this;\n  }\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = Number(process.exitCode ?? 0); // process.exitCode does allow a string or an integer, but we prefer just a number\n    if (\n      exitCode === 0 &&\n      contextOptions &&\n      typeof contextOptions !== 'function' &&\n      contextOptions.error\n    ) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  }\n\n  /**\n   * // Do a little typing to coordinate emit and listener for the help text events.\n   * @typedef HelpTextEventContext\n   * @type {object}\n   * @property {boolean} error\n   * @property {Command} command\n   * @property {function} write\n   */\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {(string | Function)} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (/** @type {HelpTextEventContext} */ context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Output help information if help flags specified\n   *\n   * @param {Array} args - array of options to search for help flags\n   * @private\n   */\n\n  _outputHelpIfRequested(args) {\n    const helpOption = this._getHelpOption();\n    const helpRequested = helpOption && args.find((arg) => helpOption.is(arg));\n    if (helpRequested) {\n      this.outputHelp();\n      // (Do not have all displayed text available so only passing placeholder.)\n      this._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n    }\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if (\n      (match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null\n    ) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if (\n      (match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null\n    ) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\n/**\n * @returns {boolean | undefined}\n * @package\n */\nfunction useColor() {\n  // Test for common conventions.\n  // NB: the observed behaviour is in combination with how author adds color! For example:\n  //   - we do not test NODE_DISABLE_COLORS, but util:styletext does\n  //   - we do test NO_COLOR, but Chalk does not\n  //\n  // References:\n  // https://no-color.org\n  // https://bixense.com/clicolors/\n  // https://github.com/nodejs/node/blob/0a00217a5f67ef4a22384cfc80eb6dd9a917fdc1/lib/internal/tty.js#L109\n  // https://github.com/chalk/supports-color/blob/c214314a14bcb174b12b3014b2b0a8de375029ae/index.js#L33\n  // (https://force-color.org recent web page from 2023, does not match major javascript implementations)\n\n  if (\n    process.env.NO_COLOR ||\n    process.env.FORCE_COLOR === '0' ||\n    process.env.FORCE_COLOR === 'false'\n  )\n    return false;\n  if (process.env.FORCE_COLOR || process.env.CLICOLOR_FORCE !== undefined)\n    return true;\n  return undefined;\n}\n\nexports.Command = Command;\nexports.useColor = useColor; // exporting for tests\n","const { Argument } = require('./lib/argument.js');\nconst { Command } = require('./lib/command.js');\nconst { CommanderError, InvalidArgumentError } = require('./lib/error.js');\nconst { Help } = require('./lib/help.js');\nconst { Option } = require('./lib/option.js');\n\nexports.program = new Command();\n\nexports.createCommand = (name) => new Command(name);\nexports.createOption = (flags, description) => new Option(flags, description);\nexports.createArgument = (name, description) => new Argument(name, description);\n\n/**\n * Expose classes\n */\n\nexports.Command = Command;\nexports.Option = Option;\nexports.Argument = Argument;\nexports.Help = Help;\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\nexports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated\n","import commander from './index.js';\n\n// wrapper to provide named exports for ESM.\nexport const {\n  program,\n  createCommand,\n  createArgument,\n  createOption,\n  CommanderError,\n  InvalidArgumentError,\n  InvalidOptionArgumentError, // deprecated old name\n  Command,\n  Argument,\n  Option,\n  Help,\n} = commander;\n","'use strict'\nmodule.exports = rfdc\n\nfunction copyBuffer (cur) {\n  if (cur instanceof Buffer) {\n    return Buffer.from(cur)\n  }\n\n  return new cur.constructor(cur.buffer.slice(), cur.byteOffset, cur.length)\n}\n\nfunction rfdc (opts) {\n  opts = opts || {}\n  if (opts.circles) return rfdcCircles(opts)\n\n  const constructorHandlers = new Map()\n  constructorHandlers.set(Date, (o) => new Date(o))\n  constructorHandlers.set(Map, (o, fn) => new Map(cloneArray(Array.from(o), fn)))\n  constructorHandlers.set(Set, (o, fn) => new Set(cloneArray(Array.from(o), fn)))\n  if (opts.constructorHandlers) {\n    for (const handler of opts.constructorHandlers) {\n      constructorHandlers.set(handler[0], handler[1])\n    }\n  }\n\n  let handler = null\n\n  return opts.proto ? cloneProto : clone\n\n  function cloneArray (a, fn) {\n    const keys = Object.keys(a)\n    const a2 = new Array(keys.length)\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i]\n      const cur = a[k]\n      if (typeof cur !== 'object' || cur === null) {\n        a2[k] = cur\n      } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n        a2[k] = handler(cur, fn)\n      } else if (ArrayBuffer.isView(cur)) {\n        a2[k] = copyBuffer(cur)\n      } else {\n        a2[k] = fn(cur)\n      }\n    }\n    return a2\n  }\n\n  function clone (o) {\n    if (typeof o !== 'object' || o === null) return o\n    if (Array.isArray(o)) return cloneArray(o, clone)\n    if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n      return handler(o, clone)\n    }\n    const o2 = {}\n    for (const k in o) {\n      if (Object.hasOwnProperty.call(o, k) === false) continue\n      const cur = o[k]\n      if (typeof cur !== 'object' || cur === null) {\n        o2[k] = cur\n      } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n        o2[k] = handler(cur, clone)\n      } else if (ArrayBuffer.isView(cur)) {\n        o2[k] = copyBuffer(cur)\n      } else {\n        o2[k] = clone(cur)\n      }\n    }\n    return o2\n  }\n\n  function cloneProto (o) {\n    if (typeof o !== 'object' || o === null) return o\n    if (Array.isArray(o)) return cloneArray(o, cloneProto)\n    if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n      return handler(o, cloneProto)\n    }\n    const o2 = {}\n    for (const k in o) {\n      const cur = o[k]\n      if (typeof cur !== 'object' || cur === null) {\n        o2[k] = cur\n      } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n        o2[k] = handler(cur, cloneProto)\n      } else if (ArrayBuffer.isView(cur)) {\n        o2[k] = copyBuffer(cur)\n      } else {\n        o2[k] = cloneProto(cur)\n      }\n    }\n    return o2\n  }\n}\n\nfunction rfdcCircles (opts) {\n  const refs = []\n  const refsNew = []\n\n  const constructorHandlers = new Map()\n  constructorHandlers.set(Date, (o) => new Date(o))\n  constructorHandlers.set(Map, (o, fn) => new Map(cloneArray(Array.from(o), fn)))\n  constructorHandlers.set(Set, (o, fn) => new Set(cloneArray(Array.from(o), fn)))\n  if (opts.constructorHandlers) {\n    for (const handler of opts.constructorHandlers) {\n      constructorHandlers.set(handler[0], handler[1])\n    }\n  }\n\n  let handler = null\n  return opts.proto ? cloneProto : clone\n\n  function cloneArray (a, fn) {\n    const keys = Object.keys(a)\n    const a2 = new Array(keys.length)\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i]\n      const cur = a[k]\n      if (typeof cur !== 'object' || cur === null) {\n        a2[k] = cur\n      } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n        a2[k] = handler(cur, fn)\n      } else if (ArrayBuffer.isView(cur)) {\n        a2[k] = copyBuffer(cur)\n      } else {\n        const index = refs.indexOf(cur)\n        if (index !== -1) {\n          a2[k] = refsNew[index]\n        } else {\n          a2[k] = fn(cur)\n        }\n      }\n    }\n    return a2\n  }\n\n  function clone (o) {\n    if (typeof o !== 'object' || o === null) return o\n    if (Array.isArray(o)) return cloneArray(o, clone)\n    if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n      return handler(o, clone)\n    }\n    const o2 = {}\n    refs.push(o)\n    refsNew.push(o2)\n    for (const k in o) {\n      if (Object.hasOwnProperty.call(o, k) === false) continue\n      const cur = o[k]\n      if (typeof cur !== 'object' || cur === null) {\n        o2[k] = cur\n      } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n        o2[k] = handler(cur, clone)\n      } else if (ArrayBuffer.isView(cur)) {\n        o2[k] = copyBuffer(cur)\n      } else {\n        const i = refs.indexOf(cur)\n        if (i !== -1) {\n          o2[k] = refsNew[i]\n        } else {\n          o2[k] = clone(cur)\n        }\n      }\n    }\n    refs.pop()\n    refsNew.pop()\n    return o2\n  }\n\n  function cloneProto (o) {\n    if (typeof o !== 'object' || o === null) return o\n    if (Array.isArray(o)) return cloneArray(o, cloneProto)\n    if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n      return handler(o, cloneProto)\n    }\n    const o2 = {}\n    refs.push(o)\n    refsNew.push(o2)\n    for (const k in o) {\n      const cur = o[k]\n      if (typeof cur !== 'object' || cur === null) {\n        o2[k] = cur\n      } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n        o2[k] = handler(cur, cloneProto)\n      } else if (ArrayBuffer.isView(cur)) {\n        o2[k] = copyBuffer(cur)\n      } else {\n        const i = refs.indexOf(cur)\n        if (i !== -1) {\n          o2[k] = refsNew[i]\n        } else {\n          o2[k] = cloneProto(cur)\n        }\n      }\n    }\n    refs.pop()\n    refsNew.pop()\n    return o2\n  }\n}\n","#!/usr/bin/env node\nimport { Help, Option, program } from 'commander'\nimport createCloneDeep from 'rfdc'\nimport semver from 'semver'\nimport pkg from '../../package.json'\nimport cliOptions, { renderExtendedHelp } from '../cli-options'\nimport ncu from '../index'\nimport { chalkInit } from '../lib/chalk'\n// async global contexts are only available in esm modules -> function\nimport getNcuRc from '../lib/getNcuRc'\nimport { pickBy } from '../lib/pick'\n\nconst optionVersionDescription = 'Output the version number of npm-check-updates.'\n\n/** Removes inline code ticks. */\nconst uncode = (s: string) => s.replace(/`/g, '')\n\nconst cloneDeep = createCloneDeep()\n\n;(async () => {\n  // importing update-notifier dynamically as esm modules are only allowed to be dynamically imported inside of cjs modules\n  const { default: updateNotifier } = await import('update-notifier')\n\n  // check if a new version of ncu is available and print an update notification\n  //\n  // For testing from specific versions, use:\n  //\n  // updateNotifier({\n  //   pkg: {\n  //     name: 'npm-check-updates',\n  //     version: x.y.z\n  //   },\n  //   updateCheckInterval: 0\n  // })\n\n  const notifier = updateNotifier({ pkg })\n  if (notifier.update && notifier.update.latest !== pkg.version) {\n    const { default: chalk } = await import('chalk')\n\n    // generate release urls for all the major versions from the current version up to the latest\n    const currentMajor = semver.parse(notifier.update.current)?.major\n    const latestMajor = semver.parse(notifier.update.latest)?.major\n    const majorVersions =\n      // Greater than or equal to (>=) will always return false if either operant is NaN or undefined.\n      // Without this condition, it can result in a RangeError: Invalid array length.\n      // See: https://github.com/raineorshine/npm-check-updates/issues/1200\n      currentMajor && latestMajor && latestMajor >= currentMajor\n        ? new Array(latestMajor - currentMajor).fill(0).map((x, i) => currentMajor + i + 1)\n        : []\n    const releaseUrls = majorVersions.map(majorVersion => `${pkg.homepage ?? ''}/releases/tag/v${majorVersion}.0.0`)\n\n    // for non-major updates, generate a URL to view all commits since the current version\n    const compareUrl = `${pkg.homepage ?? ''}/compare/v${notifier.update.current}...v${notifier.update.latest}`\n\n    notifier.notify({\n      defer: false,\n      isGlobal: true,\n      message: `Update available ${chalk.dim('{currentVersion}')}${chalk.reset(' → ')}${\n        notifier.update.type === 'major'\n          ? chalk.red('{latestVersion}')\n          : notifier.update.type === 'minor'\n            ? chalk.yellow('{latestVersion}')\n            : chalk.green('{latestVersion}')\n      }\nRun ${chalk.cyan('{updateCommand}')} to update\n${chalk.dim.underline(\n  notifier.update.type === 'major' ? releaseUrls.map(url => chalk.dim.underline(url)).join('\\n') : compareUrl,\n)}`,\n    })\n  }\n\n  // manually detect option-specific help\n  // https://github.com/raineorshine/npm-check-updates/issues/787\n  const rawArgs = process.argv.slice(2)\n  const indexHelp = rawArgs.findIndex(arg => arg === '--help' || arg === '-h')\n  if (indexHelp !== -1 && rawArgs[indexHelp + 1]) {\n    const helpOption = rawArgs[indexHelp + 1].replace(/^-*/, '')\n    if (helpOption === 'help' || helpOption === 'h') {\n      console.info('Would you like some help with your help?')\n    } else {\n      await chalkInit()\n      const nonHelpArgs = [...rawArgs.slice(0, indexHelp), ...rawArgs.slice(indexHelp + 1)]\n      nonHelpArgs.forEach(arg => {\n        // match option by long or short\n        const query = arg.replace(/^-*/, '')\n        const option = cliOptions.find(\n          option =>\n            query === option.long ||\n            query === option.short ||\n            (query === `no-${option.long}` && option.type === 'boolean'),\n        )\n        if (option) {\n          console.info(renderExtendedHelp(option) + '\\n')\n        } else if (query === 'version' || query === 'v' || query === 'V') {\n          console.info(\n            renderExtendedHelp({\n              long: 'version',\n              short: 'v',\n              description: optionVersionDescription,\n              // do not pass boolean or it will print --no-version\n              type: 'string',\n            }) + '\\n',\n          )\n        } else {\n          console.info(`Unknown option: ${arg}`)\n        }\n      })\n    }\n    process.exit(0)\n  }\n\n  // a set of options that only work in an rc config file, not on the command line\n  const noCli = new Set(cliOptions.filter(option => option.cli === false).map(option => `--${option.long}`))\n\n  // start commander program\n  program\n    .description('[filter] is a list or regex of package names to check (all others will be ignored).')\n    .usage('[options] [filter]')\n    // See: boolean optional arg below\n    .configureHelp({\n      optionTerm: option =>\n        option.long && noCli.has(option.long)\n          ? option.long.replace('--', '') + '*'\n          : option.long === '--version'\n            ? // add -v to version help to cover the alias added below\n              '-v, -V, --version'\n            : option.flags.replace('[bool]', ''),\n      optionDescription: option =>\n        option.long === '--version'\n          ? optionVersionDescription\n          : option.long === '--help'\n            ? `You're lookin' at it. Run \"ncu --help <option>\" for a specific option.`\n            : Help.prototype.optionDescription(option),\n    })\n    // add hidden -v alias for --V/--version\n    .addOption(new Option('-v, --versionAlias').hideHelp())\n    .on('option:versionAlias', () => {\n      console.info(pkg.version)\n      process.exit(0)\n    })\n\n  // add cli options\n  cliOptions.forEach(({ long, short, arg, description, default: defaultValue, help, parse, type }) => {\n    const flags = `${short ? `-${short}, ` : ''}--${long}${arg ? ` <${arg}>` : ''}`\n    // format description for cli by removing inline code ticks\n    // point to help in description if extended help text is available\n    const descriptionFormatted = `${uncode(description)}${help ? ` Run \"ncu --help ${long}\" for details.` : ''}`\n\n    // handle 3rd/4th argument polymorphism\n    program.option(flags, descriptionFormatted, parse || defaultValue, parse ? defaultValue : undefined)\n\n    // add --no- prefixed boolean options\n    // necessary for overriding booleans set to true in the ncurc\n    if (type === 'boolean') {\n      program.addOption(new Option(`--no-${long}`).default(false).hideHelp())\n    }\n  })\n\n  // set version option at the end\n  program.version(pkg.version)\n\n  // commander mutates its optionValues with program.parse\n  // In order to call program.parse again and parse the rc file options, we need to clear commander's internal optionValues\n  // Otherwise array options will be duplicated\n  const defaultOptionValues = cloneDeep((program as any)._optionValues)\n  program.allowExcessArguments(true)\n  program.parse(process.argv)\n\n  const programOpts = program.opts()\n  const programArgs = process.argv.slice(2)\n\n  const { color, configFileName, configFilePath, global, packageFile, mergeConfig } = programOpts\n\n  // Force color on all chalk instances.\n  // See: /src/lib/chalk.ts\n  await chalkInit(color)\n\n  // load .ncurc\n  // Do not load when tests are running (can be overridden if configFilePath is set explicitly, or --mergeConfig option specified)\n  const rcResult =\n    !process.env.NCU_TESTS || configFilePath || mergeConfig\n      ? await getNcuRc({\n          configFileName,\n          configFilePath,\n          global,\n          packageFile,\n          options: { ...programOpts, cli: true },\n        })\n      : null\n\n  // override rc args with program args\n  const rcArgs = (rcResult?.args || []).filter(\n    (arg, i, args) =>\n      (typeof arg !== 'string' || !arg.startsWith('-') || !programArgs.includes(arg)) &&\n      (typeof args[i - 1] !== 'string' || !args[i - 1].startsWith('-') || !programArgs.includes(args[i - 1])),\n  )\n\n  // insert config arguments into command line arguments so they can all be parsed by commander\n  const combinedArguments = [...process.argv.slice(0, 2), ...rcArgs, ...programArgs]\n\n  // See defaultOptionValues comment above\n  ;(program as any)._optionValues = defaultOptionValues\n  program.parse(combinedArguments)\n  const combinedProgramOpts = program.opts()\n\n  // filter out undefined program options and combine cli options with config file options\n  const options = {\n    ...(rcResult && Object.keys(rcResult.config).length > 0 ? { rcConfigPath: rcResult.filePath } : null),\n    ...pickBy(program.opts(), (value: unknown) => value !== undefined),\n    args: program.args,\n    ...(combinedProgramOpts.filter ? { filter: combinedProgramOpts.filter } : null),\n    ...(combinedProgramOpts.reject ? { reject: combinedProgramOpts.reject } : null),\n  }\n\n  // NOTE: Options handling and defaults go in initOptions in index.js\n\n  ncu(options, { cli: true })\n})()\n"],"names":["CommanderError","exitCode","code","message","InvalidArgumentError","error","require$$0","Argument","name","description","value","previous","fn","values","arg","humanReadableArgName","nameOutput","argument","Help","contextOptions","cmd","visibleCommands","helpCommand","a","b","getSortKey","option","visibleOptions","helpOption","removeShort","removeLong","globalOptions","ancestorCmd","args","helper","max","command","cmdName","ancestorCmdNames","extraInfo","choice","extraDescription","heading","items","unsortedItems","visibleItems","getGroup","result","item","group","termWidth","helpWidth","callFormatItem","term","output","commandDescription","argumentList","options","optionList","globalOptionList","sub","commands","commandList","str","stripColor","word","itemIndentStr","paddedTerm","spacerWidth","remainingWidth","formattedDescription","width","rawLines","chunkPattern","wrappedLines","line","chunks","sumChunks","sumWidth","chunk","visibleWidth","nextChunk","sgrPattern","help","Option","flags","optionFlags","splitOptionFlags","names","impliedOptionValues","newImplied","mandatory","hide","camelcase","DualOptions","key","optionKey","preset","negativeValue","shortFlag","longFlag","shortFlagExp","longFlagExp","flagParts","unsupportedFlag","baseError","maxDistance","editDistance","d","i","j","cost","suggestSimilar","candidates","searchingOptions","candidate","similar","bestDistance","minSimilarity","distance","length","suggestSimilar_1","EventEmitter","childProcess","require$$1","path","require$$2","fs","require$$3","process","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","Command","write","useColor","sourceCommand","nameAndArgs","actionOptsOrExecDesc","execOpts","desc","opts","configuration","displayHelp","displaySuggestion","parseArg","defaultValue","detail","previousArgument","enableOrNameAndArgs","helpName","helpArgs","helpDescription","deprecatedDescription","event","listener","allowedValues","err","expectedArgsCount","actionArgs","target","invalidArgumentMessage","matchingOption","matchingFlag","knownBy","alreadyUsed","existingCmd","newCmd","oname","positiveLongFlag","handleOptionValue","val","invalidValueMessage","valueSource","oldValue","config","regex","def","combine","allowUnknown","allowExcess","positional","passThrough","storeAsProperties","source","argv","parseOptions","execArgv","userArgs","executableFile","executableDir","subcommandName","executableDirMessage","executableMissing","subcommand","launchWithNode","sourceExt","findFile","baseDir","baseName","localBin","foundExt","ext","resolvedScriptPath","localFile","legacyName","proc","incrementNodeInspectorPort","signal","exitCallback","wrappedError","commandName","operands","unknown","subCommand","promiseChain","myParseArg","parsedValue","processedArgs","declaredArg","index","processed","v","promise","hooks","hookedCommand","callback","hookDetail","hook","parsed","checkForUnknownOptions","commandEvent","anOption","definedNonDefaultOptions","conflictingAndDefined","defined","dest","maybeOption","negativeNumberArg","opt","short","activeVariadicOption","activeGroup","len","combinedOptions","errorOptions","dualHelper","hasCustomOptionValue","impliedKey","conflictingOption","findBestOptionFromValue","optionValue","negativeOption","positiveOption","getErrorMessage","bestOption","flag","suggestion","candidateFlags","moreFlags","receivedArgs","expected","s","unknownName","candidateNames","versionOption","argsDescription","alias","matchingCommand","aliases","filename","context","text","baseWrite","hasColors","deprecatedCallback","outputContext","eventContext","helpInformation","position","helpEvent","helpStr","debugOption","debugHost","debugPort","match","commander","program","createCommand","createArgument","createOption","InvalidOptionArgumentError","rfdc_1","rfdc","copyBuffer","cur","rfdcCircles","constructorHandlers","o","cloneArray","handler","cloneProto","clone","keys","a2","k","o2","refs","refsNew","optionVersionDescription","uncode","cloneDeep","createCloneDeep","updateNotifier","notifier","pkg","chalk","currentMajor","semver","latestMajor","releaseUrls","x","majorVersion","compareUrl","url","rawArgs","indexHelp","chalkInit","query","cliOptions","renderExtendedHelp","noCli","long","parse","type","descriptionFormatted","defaultOptionValues","programOpts","programArgs","color","configFileName","configFilePath","global","packageFile","mergeConfig","rcResult","getNcuRc","rcArgs","combinedArguments","combinedProgramOpts","pickBy","ncu"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}