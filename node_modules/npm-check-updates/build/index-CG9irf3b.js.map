{"version":3,"file":"index-CG9irf3b.js","sources":["../node_modules/cacache/node_modules/p-map/index.js"],"sourcesContent":["export default async function pMap(\n\titerable,\n\tmapper,\n\t{\n\t\tconcurrency = Number.POSITIVE_INFINITY,\n\t\tstopOnError = true,\n\t\tsignal,\n\t} = {},\n) {\n\treturn new Promise((resolve_, reject_) => {\n\t\tif (iterable[Symbol.iterator] === undefined && iterable[Symbol.asyncIterator] === undefined) {\n\t\t\tthrow new TypeError(`Expected \\`input\\` to be either an \\`Iterable\\` or \\`AsyncIterable\\`, got (${typeof iterable})`);\n\t\t}\n\n\t\tif (typeof mapper !== 'function') {\n\t\t\tthrow new TypeError('Mapper function is required');\n\t\t}\n\n\t\tif (!((Number.isSafeInteger(concurrency) && concurrency >= 1) || concurrency === Number.POSITIVE_INFINITY)) {\n\t\t\tthrow new TypeError(`Expected \\`concurrency\\` to be an integer from 1 and up or \\`Infinity\\`, got \\`${concurrency}\\` (${typeof concurrency})`);\n\t\t}\n\n\t\tconst result = [];\n\t\tconst errors = [];\n\t\tconst skippedIndexesMap = new Map();\n\t\tlet isRejected = false;\n\t\tlet isResolved = false;\n\t\tlet isIterableDone = false;\n\t\tlet resolvingCount = 0;\n\t\tlet currentIndex = 0;\n\t\tconst iterator = iterable[Symbol.iterator] === undefined ? iterable[Symbol.asyncIterator]() : iterable[Symbol.iterator]();\n\n\t\tconst signalListener = () => {\n\t\t\treject(signal.reason);\n\t\t};\n\n\t\tconst cleanup = () => {\n\t\t\tsignal?.removeEventListener('abort', signalListener);\n\t\t};\n\n\t\tconst resolve = value => {\n\t\t\tresolve_(value);\n\t\t\tcleanup();\n\t\t};\n\n\t\tconst reject = reason => {\n\t\t\tisRejected = true;\n\t\t\tisResolved = true;\n\t\t\treject_(reason);\n\t\t\tcleanup();\n\t\t};\n\n\t\tif (signal) {\n\t\t\tif (signal.aborted) {\n\t\t\t\treject(signal.reason);\n\t\t\t}\n\n\t\t\tsignal.addEventListener('abort', signalListener, {once: true});\n\t\t}\n\n\t\tconst next = async () => {\n\t\t\tif (isResolved) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextItem = await iterator.next();\n\n\t\t\tconst index = currentIndex;\n\t\t\tcurrentIndex++;\n\n\t\t\t// Note: `iterator.next()` can be called many times in parallel.\n\t\t\t// This can cause multiple calls to this `next()` function to\n\t\t\t// receive a `nextItem` with `done === true`.\n\t\t\t// The shutdown logic that rejects/resolves must be protected\n\t\t\t// so it runs only one time as the `skippedIndex` logic is\n\t\t\t// non-idempotent.\n\t\t\tif (nextItem.done) {\n\t\t\t\tisIterableDone = true;\n\n\t\t\t\tif (resolvingCount === 0 && !isResolved) {\n\t\t\t\t\tif (!stopOnError && errors.length > 0) {\n\t\t\t\t\t\treject(new AggregateError(errors)); // eslint-disable-line unicorn/error-message\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tisResolved = true;\n\n\t\t\t\t\tif (skippedIndexesMap.size === 0) {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst pureResult = [];\n\n\t\t\t\t\t// Support multiple `pMapSkip`'s.\n\t\t\t\t\tfor (const [index, value] of result.entries()) {\n\t\t\t\t\t\tif (skippedIndexesMap.get(index) === pMapSkip) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpureResult.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(pureResult);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolvingCount++;\n\n\t\t\t// Intentionally detached\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst element = await nextItem.value;\n\n\t\t\t\t\tif (isResolved) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = await mapper(element, index);\n\n\t\t\t\t\t// Use Map to stage the index of the element.\n\t\t\t\t\tif (value === pMapSkip) {\n\t\t\t\t\t\tskippedIndexesMap.set(index, value);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult[index] = value;\n\n\t\t\t\t\tresolvingCount--;\n\t\t\t\t\tawait next();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (stopOnError) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors.push(error);\n\t\t\t\t\t\tresolvingCount--;\n\n\t\t\t\t\t\t// In that case we can't really continue regardless of `stopOnError` state\n\t\t\t\t\t\t// since an iterable is likely to continue throwing after it throws once.\n\t\t\t\t\t\t// If we continue calling `next()` indefinitely we will likely end up\n\t\t\t\t\t\t// in an infinite loop of failed iteration.\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait next();\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t};\n\n\t\t// Create the concurrent runners in a detached (non-awaited)\n\t\t// promise. We need this so we can await the `next()` calls\n\t\t// to stop creating runners before hitting the concurrency limit\n\t\t// if the iterable has already been marked as done.\n\t\t// NOTE: We *must* do this for async iterators otherwise we'll spin up\n\t\t// infinite `next()` calls by default and never start the event loop.\n\t\t(async () => {\n\t\t\tfor (let index = 0; index < concurrency; index++) {\n\t\t\t\ttry {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tawait next();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (isIterableDone || isRejected) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t});\n}\n\nexport function pMapIterable(\n\titerable,\n\tmapper,\n\t{\n\t\tconcurrency = Number.POSITIVE_INFINITY,\n\t\tbackpressure = concurrency,\n\t} = {},\n) {\n\tif (iterable[Symbol.iterator] === undefined && iterable[Symbol.asyncIterator] === undefined) {\n\t\tthrow new TypeError(`Expected \\`input\\` to be either an \\`Iterable\\` or \\`AsyncIterable\\`, got (${typeof iterable})`);\n\t}\n\n\tif (typeof mapper !== 'function') {\n\t\tthrow new TypeError('Mapper function is required');\n\t}\n\n\tif (!((Number.isSafeInteger(concurrency) && concurrency >= 1) || concurrency === Number.POSITIVE_INFINITY)) {\n\t\tthrow new TypeError(`Expected \\`concurrency\\` to be an integer from 1 and up or \\`Infinity\\`, got \\`${concurrency}\\` (${typeof concurrency})`);\n\t}\n\n\tif (!((Number.isSafeInteger(backpressure) && backpressure >= concurrency) || backpressure === Number.POSITIVE_INFINITY)) {\n\t\tthrow new TypeError(`Expected \\`backpressure\\` to be an integer from \\`concurrency\\` (${concurrency}) and up or \\`Infinity\\`, got \\`${backpressure}\\` (${typeof backpressure})`);\n\t}\n\n\treturn {\n\t\tasync * [Symbol.asyncIterator]() {\n\t\t\tconst iterator = iterable[Symbol.asyncIterator] === undefined ? iterable[Symbol.iterator]() : iterable[Symbol.asyncIterator]();\n\n\t\t\tconst promises = [];\n\t\t\tlet runningMappersCount = 0;\n\t\t\tlet isDone = false;\n\t\t\tlet index = 0;\n\n\t\t\tfunction trySpawn() {\n\t\t\t\tif (isDone || !(runningMappersCount < concurrency && promises.length < backpressure)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst promise = (async () => {\n\t\t\t\t\tconst {done, value} = await iterator.next();\n\n\t\t\t\t\tif (done) {\n\t\t\t\t\t\treturn {done: true};\n\t\t\t\t\t}\n\n\t\t\t\t\trunningMappersCount++;\n\n\t\t\t\t\t// Spawn if still below concurrency and backpressure limit\n\t\t\t\t\ttrySpawn();\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst returnValue = await mapper(await value, index++);\n\n\t\t\t\t\t\trunningMappersCount--;\n\n\t\t\t\t\t\tif (returnValue === pMapSkip) {\n\t\t\t\t\t\t\tconst index = promises.indexOf(promise);\n\n\t\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\t\tpromises.splice(index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Spawn if still below backpressure limit and just dropped below concurrency limit\n\t\t\t\t\t\ttrySpawn();\n\n\t\t\t\t\t\treturn {done: false, value: returnValue};\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tisDone = true;\n\t\t\t\t\t\treturn {error};\n\t\t\t\t\t}\n\t\t\t\t})();\n\n\t\t\t\tpromises.push(promise);\n\t\t\t}\n\n\t\t\ttrySpawn();\n\n\t\t\twhile (promises.length > 0) {\n\t\t\t\tconst {error, done, value} = await promises[0]; // eslint-disable-line no-await-in-loop\n\n\t\t\t\tpromises.shift();\n\n\t\t\t\tif (error) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tif (done) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Spawn if just dropped below backpressure limit and below the concurrency limit\n\t\t\t\ttrySpawn();\n\n\t\t\t\tif (value === pMapSkip) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tyield value;\n\t\t\t}\n\t\t},\n\t};\n}\n\nexport const pMapSkip = Symbol('skip');\n"],"names":["pMap","iterable","mapper","concurrency","stopOnError","signal","resolve_","reject_","result","errors","skippedIndexesMap","isRejected","isResolved","isIterableDone","resolvingCount","currentIndex","iterator","signalListener","reject","cleanup","resolve","value","reason","next","nextItem","index","pureResult","pMapSkip","element","error"],"mappings":"gFAAe,eAAeA,EAC7BC,EACAC,EACA,CACC,YAAAC,EAAc,OAAO,kBACrB,YAAAC,EAAc,GACd,OAAAC,CACF,EAAK,CAAA,EACH,CACD,OAAO,IAAI,QAAQ,CAACC,EAAUC,IAAY,CACzC,GAAIN,EAAS,OAAO,QAAQ,IAAM,QAAaA,EAAS,OAAO,aAAa,IAAM,OACjF,MAAM,IAAI,UAAU,8EAA8E,OAAOA,CAAQ,GAAG,EAGrH,GAAI,OAAOC,GAAW,WACrB,MAAM,IAAI,UAAU,6BAA6B,EAGlD,GAAI,EAAG,OAAO,cAAcC,CAAW,GAAKA,GAAe,GAAMA,IAAgB,OAAO,mBACvF,MAAM,IAAI,UAAU,kFAAkFA,CAAW,OAAO,OAAOA,CAAW,GAAG,EAG9I,MAAMK,EAAS,CAAA,EACTC,EAAS,CAAA,EACTC,EAAoB,IAAI,IAC9B,IAAIC,EAAa,GACbC,EAAa,GACbC,EAAiB,GACjBC,EAAiB,EACjBC,EAAe,EACnB,MAAMC,EAAWf,EAAS,OAAO,QAAQ,IAAM,OAAYA,EAAS,OAAO,aAAa,EAAC,EAAKA,EAAS,OAAO,QAAQ,EAAC,EAEjHgB,EAAiB,IAAM,CAC5BC,EAAOb,EAAO,MAAM,CACrB,EAEMc,EAAU,IAAM,CACrBd,GAAQ,oBAAoB,QAASY,CAAc,CACpD,EAEMG,EAAUC,GAAS,CACxBf,EAASe,CAAK,EACdF,EAAO,CACR,EAEMD,EAASI,GAAU,CACxBX,EAAa,GACbC,EAAa,GACbL,EAAQe,CAAM,EACdH,EAAO,CACR,EAEId,IACCA,EAAO,SACVa,EAAOb,EAAO,MAAM,EAGrBA,EAAO,iBAAiB,QAASY,EAAgB,CAAC,KAAM,EAAI,CAAC,GAG9D,MAAMM,EAAO,SAAY,CACxB,GAAIX,EACH,OAGD,MAAMY,EAAW,MAAMR,EAAS,KAAI,EAE9BS,EAAQV,EASd,GARAA,IAQIS,EAAS,KAAM,CAGlB,GAFAX,EAAiB,GAEbC,IAAmB,GAAK,CAACF,EAAY,CACxC,GAAI,CAACR,GAAeK,EAAO,OAAS,EAAG,CACtCS,EAAO,IAAI,eAAeT,CAAM,CAAC,EACjC,MACD,CAIA,GAFAG,EAAa,GAETF,EAAkB,OAAS,EAAG,CACjCU,EAAQZ,CAAM,EACd,MACD,CAEA,MAAMkB,EAAa,CAAA,EAGnB,SAAW,CAACD,EAAOJ,CAAK,IAAKb,EAAO,QAAO,EACtCE,EAAkB,IAAIe,CAAK,IAAME,GAIrCD,EAAW,KAAKL,CAAK,EAGtBD,EAAQM,CAAU,CACnB,CAEA,MACD,CAEAZ,KAGC,SAAY,CACZ,GAAI,CACH,MAAMc,EAAU,MAAMJ,EAAS,MAE/B,GAAIZ,EACH,OAGD,MAAMS,EAAQ,MAAMnB,EAAO0B,EAASH,CAAK,EAGrCJ,IAAUM,GACbjB,EAAkB,IAAIe,EAAOJ,CAAK,EAGnCb,EAAOiB,CAAK,EAAIJ,EAEhBP,IACA,MAAMS,EAAI,CACX,OAASM,EAAO,CACf,GAAIzB,EACHc,EAAOW,CAAK,MACN,CACNpB,EAAO,KAAKoB,CAAK,EACjBf,IAMA,GAAI,CACH,MAAMS,EAAI,CACX,OAASM,EAAO,CACfX,EAAOW,CAAK,CACb,CACD,CACD,CACD,GAAC,CACF,GAQC,SAAY,CACZ,QAASJ,EAAQ,EAAGA,EAAQtB,EAAasB,IAAS,CACjD,GAAI,CAEH,MAAMF,EAAI,CACX,OAASM,EAAO,CACfX,EAAOW,CAAK,EACZ,KACD,CAEA,GAAIhB,GAAkBF,EACrB,KAEF,CACD,GAAC,CACF,CAAC,CACF,CA0GY,MAACgB,EAAW,OAAO,MAAM","x_google_ignoreList":[0]}